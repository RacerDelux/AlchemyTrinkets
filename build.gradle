buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'gradle'
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.9'
    }
}
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'com.matthewprenger.cursegradle'

description = 'Alchemy Trinkets'
def mod_file = getModFile()
def mc_version = "1.12"
def short_version = getVersion("VERSION", mod_file)
version = mc_version + "-" + short_version
group = "com.mcmoddev"
archivesBaseName = "alchemytrinkets"
sourceCompatibility = targetCompatibility = "1.8"

class Secrets {
    def data = null

    def getProperty(String key) {
        return data ? data[key] : ''
    }
}

import groovy.json.JsonSlurper

def secretFile
if (System.getenv().SECRET_FILE) {
    secretFile = file System.getenv().SECRET_FILE
} else {
    secretFile = file 'secret.json'
}

project.ext.secret = new Secrets()
if (secretFile.exists()) {
    secretFile.withReader {
        project.ext.secret.data = new JsonSlurper().parse it
    }
}

minecraft {
    version = "14.23.1.2556"
    runDir = "minecraft"
    mappings = "snapshot_20170925"
}

repositories {
    maven {
        name 'MMD'
        url 'https://maven.mcmoddev.com/'
    }
	maven { // CoFH
    	name 'Covers Maven'
    	url 'http://maven.covers1624.net'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    compile "com.mcmoddev:OreSpawn:${mc_version}-${orespawn_version}:deobf"
    compile "com.mcmoddev:BaseMetals:${mc_version}-${bme_version}:deobf"
	compile ("cofh:CoFHCore:${mc_version}-${cofhcore_version}:deobf") {
    	exclude group: 'mezz.jei'
    }
    // compile against the JEI API but do not include it at runtime
    deobfProvided "mezz.jei:jei_${jei_mc_version}:${jei_version}:api"
    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_${jei_mc_version}:${jei_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    //inputs.property "llibrary_version", llibrary_version

    from (sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        //expand "version": project.version, "mcversion": project.minecraft.version, "llibrary_version": llibrary_version
    }
        
    from (sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

curseforge {
    apiKey = secret.curseforgeAPIKey
    project {
        id = '245813'
        changelog = file('CHANGELOG.txt')
        releaseType = 'alpha'
        addGameVersion(project.mc_version)
        def projectName = 'Alchemy Trinkets'
        def displayVersion = getVersion('VERSION', mod_file)
        if (System.getenv().BUILD_NUMBER) {
            displayVersion += '.' + System.getenv().BUILD_NUMBER
        }
        mainArtifact(jar) {
            displayName = "$project.description $displayVersion"
            relations {
                requiredLibrary 'base-metals'
                optionalLibrary 'mmd-orespawn'
            }
        }
        addArtifact(sourceJar) {
            displayName = "$project.description $displayVersion Sources"
        }

    }
}

String getModFile() {
    String path = ''
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim()
                if (s.startsWith('@Mod(')) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path
}

String getVersion(String type, String mod_file) {
    String major = '0'
    String revision = '0'
    String patch = '0'
    String prefix = "public static final String $type = \""
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2)
            String[] pts = s.split("\\.")

            major = pts[0]
            revision = pts[1]
            patch = pts[2]
        }
    }
    return "$major.$revision.$patch"
}